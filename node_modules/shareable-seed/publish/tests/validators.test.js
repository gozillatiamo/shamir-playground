'use strict';

/* eslint-env jest */

var validators = require('../lib/validators');
var errors = require('../lib/errors');

test('validateMnemonic passes', function () {
  var validMnemonic = 'zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo wrong';
  expect(validators.validateMnemonic(validMnemonic)).toBeTruthy();
});

test('validateMnemonic fails on invalid mnemonic', function () {
  var invalidMnemonic = 'zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo wrong wrong';
  expect(function () {
    validators.validateMnemonic(invalidMnemonic);
  }).toThrow(Error(errors.INVALID_MNEMONIC));
});

test('validateMnemonic fails on short mnemonic', function () {
  var invalidMnemonic = 'zoo zoo zoo';
  expect(function () {
    validators.validateMnemonic(invalidMnemonic);
  }).toThrow(Error(errors.INVALID_MNEMONIC));
});

test('validateMnemonic fails on long mnemonic', function () {
  var invalidMnemonic = 'zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo';
  expect(function () {
    validators.validateMnemonic(invalidMnemonic);
  }).toThrow(Error(errors.INVALID_MNEMONIC));
});

test('validateThreshold fails on string', function () {
  var invalidThrshold = 'invalidThrshold';
  expect(function () {
    validators.validateThreshold(invalidThrshold);
  }).toThrow(Error(errors.INVALID_THRESHOLD));
});

test('validateThreshold fails on low threshold', function () {
  var invalidThrshold = 1;
  expect(function () {
    validators.validateThreshold(invalidThrshold);
  }).toThrow(Error(errors.INVALID_THRESHOLD));
});

test('validateThreshold fails on high threshold', function () {
  var invalidThrshold = 300;
  expect(function () {
    validators.validateThreshold(invalidThrshold);
  }).toThrow(Error(errors.INVALID_THRESHOLD));
});

test('validateThreshold passes', function () {
  var validThrshold = 3;
  expect(validators.validateThreshold(validThrshold)).toBeTruthy();
});

test('validateShareCount fails on string', function () {
  var invalidShareCount = 'invalidShareCount';
  expect(function () {
    validators.validateShareCount(invalidShareCount);
  }).toThrow(Error(errors.INVALID_SHARE_COUNT));
});

test('validateShareCount fails on low', function () {
  var invalidShareCount = 1;
  expect(function () {
    validators.validateShareCount(invalidShareCount);
  }).toThrow(Error(errors.INVALID_SHARE_COUNT));
});

test('validateShareCount fails on high', function () {
  var invalidShareCount = 300;
  expect(function () {
    validators.validateShareCount(invalidShareCount);
  }).toThrow(Error(errors.INVALID_SHARE_COUNT));
});

test('validateShareCount passes', function () {
  var shareCount = 3;
  expect(validators.validateThreshold(shareCount)).toBeTruthy();
});

test('validateWordlistName passes', function () {
  var validWordlistName = 'english';
  expect(validators.validateWordlistName(validWordlistName)).toBeTruthy();
});

test('validateWordlistName fails', function () {
  var invalidWordlistName = 'invalidWordlist';
  expect(function () {
    validators.validateWordlistName(invalidWordlistName);
  }).toThrow(Error(errors.INVALID_WORDLIST_NAME));
});

test('validateWordlistCode fails', function () {
  var invalidWordlistCode = 'FFF';
  expect(function () {
    validators.validateWordlistCode(invalidWordlistCode);
  }).toThrow(Error(errors.INVALID_WORDLIST_CODE));
});

test('validateWordlistCode passes', function () {
  var validWordlistCode = '00';
  expect(validators.validateWordlistCode(validWordlistCode)).toBeTruthy();
});

test('validateVersionName passes', function () {
  var validVersionName = 'v1';
  expect(validators.validateVersionName(validVersionName)).toBeTruthy();
});

test('validateVersionName fails', function () {
  var invalidVersionName = 'nonversion';
  expect(function () {
    validators.validateVersionName(invalidVersionName);
  }).toThrow(Error(errors.INVALID_SHAREABLE_CODE_VERSION));
});

test('validateVersionHex passes', function () {
  var validVersionHex = '01';
  expect(validators.validateVersionHex(validVersionHex)).toBeTruthy();
});

test('validateVersionHex fails', function () {
  var invalidVersionHex = '00';
  expect(function () {
    validators.validateVersionHex(invalidVersionHex);
  }).toThrow(Error(errors.INVALID_SHAREABLE_CODE_VERSION));
});

test('validateShareableCodeChecksum passes', function () {
  var validCode = '0100404fa1a8bc3e6d80ee1316050e862c1812031493212b7ec3f3bb1b08f168cabeef505ba346';
  expect(validators.validateShareableCodeChecksum(validCode)).toBeTruthy();
});

test('validateShareableCodeChecksum fails', function () {
  var invalidCode = '0100404fa1a8bc3e6d80ee1316050e862c1812031493212b7ec3f3bb1b08f168cabeef505ba347';
  expect(function () {
    validators.validateShareableCodeChecksum(invalidCode);
  }).toThrow(Error(errors.INVALID_SHAREABLE_CODE_CHECKSUM));
});

test('validateShareList valid list', function () {
  var shareList = ['1', '2', '3'];
  expect(validators.validateShareList(shareList)).toBeTruthy();
});

test('validateShareList invalid list (1)', function () {
  var shareList = [1, '2', '3'];
  expect(function () {
    validators.validateShareList(shareList);
  }).toThrow(Error(errors.INVALID_SHARE_LIST));
});

test('validateShareList invalid list (2)', function () {
  var shareList = 'Hello';
  expect(function () {
    validators.validateShareList(shareList);
  }).toThrow(Error(errors.INVALID_SHARE_LIST));
});